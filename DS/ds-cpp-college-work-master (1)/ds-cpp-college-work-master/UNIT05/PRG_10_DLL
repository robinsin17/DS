/* Name: Harsh Singh
   Roll no: 1262
   Program: Doubly linked list
   Unit:5
*/

#include<iostream>
#include<conio.h>

using namespace std;

/* 1. Node Template */
class DNode
{
	public:
		int data;
		DNode *right;
		DNode *left;
};

/* 2. List Template */
class DList
{
	DNode *head;
	DNode *tail;
	
	public:
		DList()
		{
			head=NULL;
			tail=NULL;
		}
		void Insert(int x);
		void Delete(int x);
		void Search(int x);
		void Display();
		void Length();
};//End of list template
/* 3. Functions */

//INSERT
void DList::Insert(int x)
{
	DNode *t=new DNode();
	t->data=x;
	t->left=NULL;
	t->right=NULL;
	
	if(head==NULL)
	{
		head=t;
		tail=t;
	}
	else
	{
		tail->right=t;
		t->left=tail;
		tail=t;
	}
}//END OF INSERT


//SEARCH
void DList::Search(int x)
{
	
//Empty
	if(head==NULL)
	{
		cout<<"Empty List";
		return;
	}
	
	DNode *tmp = head;
	int flag = 0;

	while(tmp!=NULL)
	{
		if(tmp->data == x)
		{
			flag=1;
			break;
		}
		
		tmp =tmp->right;
	}
	if(flag == 1)
	{
		cout << x << "is found";
	}
	else
	{
		cout << x << " is not found";
	}

	
	
}//End of Search

//Delete

void DList :: Delete (int x)

{
	//step 1: Empty list
	if(head==NULL)
	{
		cout<<"Empty List";
		return;
	}

   //Step 2:Search for x

	DNode *tmp = head;
	DNode *prev = NULL;
	int flag = 0;

	while(tmp)
	{
		if(tmp->data == x)
		{
			flag = 1;
			break;
		}
		prev = tmp;
		tmp=tmp->right;
	}
	//step 3: x is not found
	if(flag == 0)
	{
		cout<<x<<" is not found";
		return;
	}
	//step 4: x is found
	
	//step 4a: single node deletion

	if(tmp==head && tmp->right==NULL) // also you can write as head==tail
	{
		head=NULL;
		tail=NULL;
	}
	
	else if(tmp==head)//step 4b: first node deletion
	{
		head = head->right;
		head->left=NULL;
	}
	
	else if(tmp==tail)//step 4c: last node deletion

	{
		tail=prev;
		tail->right = NULL;
	}
	
	else//step 4d: any node in the middle
	{
		prev->right = tmp->right;
	}
	//step 5: delete memory occupid by temp
	delete tmp;

}//End of Delete



//DISPLAY
void DList::Display()
{
	if(head==NULL)
	{
		cout<<"The list is empty.";
		return;
	}
	DNode *tmp=head;

	while(tmp!=NULL)
	{
		cout<< tmp->data << "->";
		tmp = tmp->right;
	}	
	cout<<"Back to first node";
}

//LENGTH
void DList::Length()
{
	if(head==NULL)
	{
		cout<<"The list is empty";
		return;
	}
	DNode *tmp=head;
	int cnt=0;
	while(tmp!=NULL)
	{
		cnt++;
		tmp=tmp->right;
	}
	cout<<"The length of this list is:" << cnt;	
}
/* 4. Menu */
int main()
{
	DList d;
	int ch, num;
	
	while(1)
	{
		system("cls");
		
		cout<<"*** Doubly linked list ***\n\n";
		
		cout<<"1. Insert a node\n";
		cout<<"2. Delete a node\n";
		cout<<"3. Search a node\n";
		cout<<"4. Display the list\n";
		cout<<"5. Length of the list\n";
		cout<<"6. Exit\n\n";
		
		cout<<"Enter your choice: ";
		cin>> ch;
		
		
		switch(ch)
		{
			case 1:
				cout<<"Enter a number:  ";
				cin>>num;
				d.Insert(num);
				getch();
				break;
				
			case 2:
				cout<<"Enter a number to delete ";
				cin>>num;
				d.Delete(num);
				getch();
				break;
				
			case 3:
				cout<<"Enter a number to search ";
				cin>>num;
				d.Search(num);
				getch();
				break;
				
			case 4:
				d.Display();
				getch();
				break;
				
			case 5:
				d.Length();
				getch();
				break;
				
			case 6:
				exit(1);
			
			default:
				cout<<"Incorrect choice!";
				
				getch();
				break;
		}//end of switch
	}//end of while
} //end of main
